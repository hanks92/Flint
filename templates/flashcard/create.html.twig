{% extends 'layouts/authenticated.html.twig' %}

{% block title %}Create a Flashcard{% endblock %}

{% block body %}
<div style="margin-top: 4rem; display: flex; flex-direction: column; align-items: center; text-align: center; min-height: 80vh;">

    <h1 class="text-5xl font-extrabold text-gray-900 dark:text-white leading-tight mb-6">
        Add a new flashcard to <span style="color: #2E5077;">{{ deck.title }}</span>
    </h1>

    <div style="width: 100%; max-width: 600px; padding: 2rem; background-color: #ffffff; border: 1px solid #ddd; border-radius: 0.75rem; box-shadow: 0 4px 12px rgba(0,0,0,0.05); text-align: left;">
        {{ form_start(form) }}

            <div style="margin-bottom: 1.5rem;">
                {{ form_label(form.question, 'Question', { 'label_attr': { 'style': 'font-weight: bold; font-size: 1.1rem; display: block; margin-bottom: 0.5rem;' } }) }}
                {{ form_widget(form.question, { 'attr': { 'class': 'wysiwyg', 'style': 'width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 0.5rem; border: 1px solid #ccc;' } }) }}
                {{ form_errors(form.question) }}
            </div>

            <div style="margin-bottom: 1.5rem;">
                {{ form_label(form.answer, 'Answer', { 'label_attr': { 'style': 'font-weight: bold; font-size: 1.1rem; display: block; margin-bottom: 0.5rem;' } }) }}
                {{ form_widget(form.answer, { 'attr': { 'class': 'wysiwyg', 'style': 'width: 100%; height: 300px; font-size: 1rem; border-radius: 0.5rem; border: 1px solid #ccc;' } }) }}
                {{ form_errors(form.answer) }}
            </div>

            <button type="submit"
                style="width: 100%; background-color: #2E5077; color: white; border: none; padding: 1rem; border-radius: 0.75rem; font-size: 1.1rem; cursor: pointer;">
                Create Flashcard
            </button>

        {{ form_end(form) }}

        <div style="margin-top: 1.5rem;">
            <a href="{{ path('deck_show', { 'id': deck.id }) }}"
               style="display: inline-block; width: 100%; background-color: #4DA1A9; color: white; border: none; padding: 1rem; border-radius: 0.75rem; font-size: 1.1rem; text-align: center; text-decoration: none; cursor: pointer;">
                Back to Deck
            </a>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="{{ asset('js/tinymce/tinymce.min.js') }}"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        tinymce.init({
    selector: '.wysiwyg',
    plugins: 'link charmap lists',
    toolbar: 'undo redo | bold italic underline | bullist numlist | link imageUpload audioUpload charmap',
    menubar: false,
    branding: false,
    license_key: 'gpl',
    height: 300,

    setup: function (editor) {
        // üéµ Ic√¥ne audio
        editor.ui.registry.addIcon('musicnote', `
            <svg width="24" height="24" viewBox="0 0 24 24">
                <path d="M9 3v12.26A4 4 0 1 0 11 19V7h4V3H9z" fill="currentColor"/>
            </svg>
        `);

        // üñºÔ∏è Ic√¥ne image
        editor.ui.registry.addIcon('imageupload', `
            <svg width="24" height="24" viewBox="0 0 24 24">
                <path d="M21 19V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14l4-4 4 4 6-6z" fill="currentColor"/>
            </svg>
        `);

        // üéß Bouton audio
        editor.ui.registry.addButton('audioUpload', {
            icon: 'musicnote',
            tooltip: 'Insert audio',
            onAction: function () {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'audio/*';
                input.onchange = function () {
                    const file = this.files[0];
                    const formData = new FormData();
                    formData.append('file', file, file.name);
                    fetch('/upload/audio', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        editor.insertContent(`<audio controls src="${data.location}"></audio>`);
                    })
                    .catch(() => alert('Audio upload failed'));
                };
                input.click();
            }
        });

        // üñºÔ∏è Bouton image
        editor.ui.registry.addButton('imageUpload', {
            icon: 'imageupload',
            tooltip: 'Insert image',
            onAction: function () {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';
                input.onchange = function () {
                    const file = this.files[0];
                    const formData = new FormData();
                    formData.append('file', file, file.name);
                    fetch('/upload/image', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        editor.insertContent(`<img src="${data.location}" alt="" style="max-width: 100%;" />`);
                    })
                    .catch(() => alert('Image upload failed'));
                };
                input.click();
            }
        });

        // üîÅ TinyMCE ‚Üí textarea
        document.querySelector('form').addEventListener('submit', () => {
            tinymce.triggerSave();
        });
    }
});


    });
</script>
{% endblock %}
